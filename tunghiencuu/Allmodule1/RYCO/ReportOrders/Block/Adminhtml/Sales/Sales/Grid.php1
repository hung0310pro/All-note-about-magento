<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

namespace RYCO\ReportOrders\Block\Adminhtml\Sales\Sales;

use Magento\Framework\ObjectManagerInterface;
use Magento\Catalog\Model\ProductRepository;


class Grid extends \Magento\Backend\Block\Widget\Grid\Extended
{
	/**
	 * @param \Magento\Backend\Block\Template\Context $context
	 * @param \Magento\Backend\Helper\Data $backendHelper
	 * @param \Magento\Sales\Model\ResourceModel\Order\Grid\CollectionFactory $collectionFactory
	 * @param array $data
	 */
	protected $_productRepository;

	protected $_objectManager;

	public function __construct(
		\Magento\Backend\Block\Template\Context $context,
		\Magento\Backend\Helper\Data $backendHelper,
		\Magento\Sales\Model\ResourceModel\Order\Item\CollectionFactory $collectionFactory,
		ObjectManagerInterface $objectManager,
		ProductRepository $productRepository,
		array $data = []
	)
	{
		$this->_collectionFactory = $collectionFactory;
		$this->_productRepository = $productRepository;
		parent::__construct($context, $backendHelper, $data);
	}

	/**
	 * @return $this|\Magento\Backend\Block\Widget\Grid
	 * @SuppressWarnings(PHPMD.CyclomaticComplexity)
	 * @SuppressWarnings(PHPMD.NPathComplexity)
	 */

	protected function _prepareCollection()
	{
		$filterData = $this->getFilterData();

		if (isset($filterData) && !empty($filterData)) {
			$collection = $this->_collectionFactory->create();

			$this->setCollection($collection);
			$where = "";
			if (!empty($filterData['from']) && !empty($filterData['to'])) {
				$where .= ' and r.created_at BETWEEN "' . $filterData['from'] . '" and "' . $filterData['to'] . '"';
			}

			if (!empty($filterData['sku'])) {
				$sku = explode(",", $filterData['sku']);
				$a = 0;
				$arraySku = [];
				foreach ($sku as $val) {
					$a++;
					$arraySku[$a] = "'$val'";
				}
				$sku2 = implode(",", $arraySku);
				$where .= ' and main_table.sku in (' . $sku2 . ')';
			}

			if (!empty($filterData['area'])) {
				$area = explode(",", $filterData['area']);
				$a = 0;
				$arrayArea = [];
				foreach ($area as $val) {
					$a++;
					$arrayArea[$a] = "'$val'";
				}
				$area2 = implode(",", $arrayArea);
				$where .= ' and shipping_address in (' . $area2 . ')';
			}

			$collection->getSelect()->join(
				['o' => 'sales_order_grid'],
				'main_table.order_id = o.entity_id',
				['created_at', 'shipping_address']
			)->join(
				['r' => 'sales_order'],
				'main_table.order_id = r.entity_id',
				['increment_id', 'total_qty_ordered']
			)->where('product_type != "simple"' . $where);

			$this->setCollection($this->getCollection());
		}
		return parent::_prepareCollection();
	}

	/**
	 * {@inheritdoc}
	 *
	 * @SuppressWarnings(PHPMD.ExcessiveMethodLength)
	 */
	protected function _prepareColumns()
	{
		$this->addColumn(
			'created_at',
			[
				'header' => __('Purchase Date'),
				'index' => 'created_at',
				'type' => 'date',
				'sortable' => false,
				'header_css_class' => 'col-orders',
				'column_css_class' => 'col-orders'
			]
		);
		$this->addColumn(
			'increment_id',
			[
				'header' => __('ID'),
				'index' => 'increment_id',
				'type' => 'text',
				'sortable' => false,
				'header_css_class' => 'col-orders',
				'column_css_class' => 'col-orders'
			]
		);
		$this->addColumn(
			'thumbnail',
			[
				'header' => __('Thumbnail'),
				'sortable' => true,
				'index' => 'entity_id',
				'renderer' => 'RYCO\ReportOrders\Block\Adminhtml\Sales\Sales\Grid\Renderer\Image'

			]
		);
		$this->addColumn(
			'total_qty_ordered',
			[
				'header' => __('Quantity sold'),
				'index' => 'total_qty_ordered',
				'type' => 'number',
				'sortable' => false
			]
		);

		$this->addColumn(
			'name',
			[
				'header' => __('Product Name'),
				'index' => 'name',
				'type' => 'text',
				'sortable' => false
			]
		);

		$this->addColumn(
			'sku',
			[
				'header' => __('Product SKU'),
				'index' => 'sku',
				'type' => 'text',
				'sortable' => false
			]
		);

		$this->addColumn(
			'description',
			[
				'header' => __('Description'),
				'index' => 'description',
				'type' => 'text',
				'sortable' => false
			]
		);

		$this->addColumn(
			'shipping_address',
			[
				'header' => __('Ship to'),
				'index' => 'shipping_address',
				'type' => 'text',
				'sortable' => false
			]
		);
		return parent::_prepareColumns();
	}


}